Elm.Helpers = Elm.Helpers || {};
Elm.Helpers.make = function (_elm) {
   "use strict";
   _elm.Helpers = _elm.Helpers || {};
   if (_elm.Helpers.values) return _elm.Helpers.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var tuples = F2(function (xs,ys) {
      return A2($List.concatMap,function (x) {    return A2($List.map,function (y) {    return {ctor: "_Tuple2",_0: x,_1: y};},ys);},xs);
   });
   var zip = $List.map2(F2(function (v0,v1) {    return {ctor: "_Tuple2",_0: v0,_1: v1};}));
   var unsafe = function (v) {
      var _p0 = v;
      if (_p0.ctor === "Just") {
            return _p0._0;
         } else {
            return _U.crashCase("Helpers",{start: {line: 28,column: 3},end: {line: 33,column: 40}},_p0)("unsafe with Nothing");
         }
   };
   var isJust = function (a) {    var _p2 = a;if (_p2.ctor === "Just") {    return true;} else {    return false;}};
   var removeDuplicates = function (list) {
      removeDuplicates: while (true) {
         var _p3 = list;
         if (_p3.ctor === "[]") {
               return _U.list([]);
            } else {
               var _p5 = _p3._1;
               var _p4 = _p3._0;
               if (A2($List.member,_p4,_p5)) {
                     var _v3 = _p5;
                     list = _v3;
                     continue removeDuplicates;
                  } else return A2($List._op["::"],_p4,removeDuplicates(_p5));
            }
      }
   };
   return _elm.Helpers.values = {_op: _op,removeDuplicates: removeDuplicates,isJust: isJust,unsafe: unsafe,zip: zip,tuples: tuples};
};